"use strict";(self.webpackChunkgp_doc_github_io=self.webpackChunkgp_doc_github_io||[]).push([[6667],{2554:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=s(6070),t=s(5710);const i={sidebar_position:6},a="GPA(GraphQL Persistence API)",o={id:"tutorial/graphql-persistence-api",title:"GPA(GraphQL Persistence API)",description:"\u5b9a\u4e49 GraphQL \u6301\u4e45\u5316\u63a5\u53e3",source:"@site/docs/tutorial/graphql-persistence-api.md",sourceDirName:"tutorial",slug:"/tutorial/graphql-persistence-api",permalink:"/docs/tutorial/graphql-persistence-api",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"GPI(GraphQL API)",permalink:"/docs/tutorial/graphql-api"},next:{title:"\u5c0f\u7ed3",permalink:"/docs/tutorial/summary"}},l={},p=[{value:"\u67e5\u8be2\u63a5\u53e3",id:"\u67e5\u8be2\u63a5\u53e3",level:2},{value:"1. \u67e5\u8be2\u6240\u6709 VIP \u7528\u6237",id:"1-\u67e5\u8be2\u6240\u6709-vip-\u7528\u6237",level:3},{value:"2. \u6839\u636e\u53d8\u91cf\u67e5\u8be2\u7528\u6237",id:"2-\u6839\u636e\u53d8\u91cf\u67e5\u8be2\u7528\u6237",level:3},{value:"3. \u63a7\u5236\u67e5\u8be2\u5b57\u6bb5",id:"3-\u63a7\u5236\u67e5\u8be2\u5b57\u6bb5",level:3},{value:"4. \u67e5\u8be2 Alice \u7684\u8ba2\u5355",id:"4-\u67e5\u8be2-alice-\u7684\u8ba2\u5355",level:3},{value:"5. \u5206\u7ec4\u67e5\u8be2\u666e\u901a\u7528\u6237\u548c\u4f1a\u5458\u7528\u6237\u7684\u6570\u91cf",id:"5-\u5206\u7ec4\u67e5\u8be2\u666e\u901a\u7528\u6237\u548c\u4f1a\u5458\u7528\u6237\u7684\u6570\u91cf",level:3},{value:"6. \u67e5\u8be2\u4ef7\u683c\u5728 300 \u4ee5\u5185, \u4ef7\u683c\u6700\u9ad8\u7684\u4ea7\u54c1",id:"6-\u67e5\u8be2\u4ef7\u683c\u5728-300-\u4ee5\u5185-\u4ef7\u683c\u6700\u9ad8\u7684\u4ea7\u54c1",level:3},{value:"\u53d8\u66f4\u63a5\u53e3",id:"\u53d8\u66f4\u63a5\u53e3",level:2},{value:"1. \u65b0\u589e\u7528\u6237 Yara",id:"1-\u65b0\u589e\u7528\u6237-yara",level:3},{value:"2. \u66f4\u65b0\u7528\u6237",id:"2-\u66f4\u65b0\u7528\u6237",level:3},{value:"3. \u5220\u9664\u7528\u6237",id:"3-\u5220\u9664\u7528\u6237",level:3}];function u(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"gpagraphql-persistence-api",children:"GPA(GraphQL Persistence API)"}),"\n",(0,n.jsx)(r.p,{children:"\u5b9a\u4e49 GraphQL \u6301\u4e45\u5316\u63a5\u53e3"}),"\n",(0,n.jsx)(r.p,{children:"GraphQL Persistence API \u7c7b\u4f3c\u4e8e JPA(Java Persistence API), \u6bd4 JPA \u66f4\u7b80\u6d01"}),"\n",(0,n.jsx)(r.p,{children:"\u65b0\u5efa UserRepository.java \u6765\u6784\u5efa persistence api \u793a\u4f8b"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",children:"|-- order-package                             \u8ba2\u5355\u5305\r\n    |-- build.gradle\r\n    |-- src\r\n        |-- main\r\n        |   |-- java\r\n        |       |-- demo.gp.order\r\n        |           |-- api\r\n        |               |-- SystemApi.java    \u7cfb\u7edfAPI\r\n        |           |-- dto\r\n        |           |   |-- annotation        GPA\u6ce8\u89e3\r\n        |           |   |-- directive         \u6307\u4ee4\u6ce8\u89e3\r\n        |           |   |-- enumType          \u679a\u4e3e\u7c7b\u578b\r\n        |           |   |-- inputObjectType   Input\u7c7b\u578b\r\n        |           |   |-- objectType        Object\u7c7b\u578b\r\n                    // highlight-start\r\n        |           |-- repository\r\n        |               |-- UserRepository.java             \u7528\u6237Repository\r\n        |               |-- ProductRepository.java          \u4ea7\u54c1Repository\r\n                    // highlight-end\r\n        |-- main\r\n            |-- java\r\n                |-- demo.gp.order\r\n                    // highlight-start\r\n                    |-- test\r\n                        |-- TestResultLoggerExtension.java  \u6d4b\u8bd5\u7ed3\u679c\u65e5\u5fd7\u62d3\u5c55\r\n                        |-- UserRepositoryTest.java         \u7528\u6237Repository\u6d4b\u8bd5\u7c7b\r\n                        |-- ProductRepositoryTest.java      \u4ea7\u54c1Repository\u6d4b\u8bd5\u7c7b\r\n                    // highlight-end\n"})}),"\n",(0,n.jsx)(r.h2,{id:"\u67e5\u8be2\u63a5\u53e3",children:"\u67e5\u8be2\u63a5\u53e3"}),"\n",(0,n.jsx)(r.h3,{id:"1-\u67e5\u8be2\u6240\u6709-vip-\u7528\u6237",children:"1. \u67e5\u8be2\u6240\u6709 VIP \u7528\u6237"}),"\n",(0,n.jsxs)(r.p,{children:["\u5b9a\u4e49 queryVIPUserList \u65b9\u6cd5, \u4f7f\u7528@Query \u6ce8\u89e3\u6807\u8bb0\u63a5\u53e3\u65b9\u6cd5, \u8bf7\u6ce8\u610f, \u6b64\u5904\u7684@Query \u6ce8\u89e3\u662f\u5728\u4e4b\u524d\u751f\u6210\u7684\u7684",(0,n.jsx)(r.a,{href:"/docs/tutorial/quick-start#4-%E4%BD%BF%E7%94%A8-gradle-%E6%8F%92%E4%BB%B6%E7%94%9F%E6%88%90-java-bean",children:"GPA \u6ce8\u89e3"}),", ",(0,n.jsx)(r.strong,{children:"\u5e76\u975e org.eclipse.microprofile.graphql.Query"})]}),"\n",(0,n.jsx)(r.p,{children:"@Query \u6ce8\u89e3\u4e2d\u5305\u542b\u6240\u6709\u7684 GraphQL \u67e5\u8be2\u5b57\u6bb5, \u53c2\u6570\u548c\u5b57\u6bb5\u53c2\u6570\u76f8\u540c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"package demo.gp.order.repository;\r\n\r\n// highlight-start\r\nimport demo.gp.order.dto.annotation.Query;\r\n// highlight-end\r\nimport demo.gp.order.dto.annotation.UserListQueryArguments;\r\nimport demo.gp.order.dto.annotation.UserTypeExpression1;\r\nimport demo.gp.order.dto.enumType.UserType;\r\nimport demo.gp.order.dto.objectType.User;\r\nimport io.graphoenix.core.dto.enumType.Operator;\r\nimport io.graphoenix.spi.annotation.GraphQLOperation;\r\n\r\nimport java.util.List;\r\n\r\n// highlight-start\r\n@GraphQLOperation // \u4f7f\u7528@GraphQLOperation \u6ce8\u89e3\u6807\u8bb0\u63a5\u53e3\u6240\u5728 CDI Bean\r\n// highlight-end\r\npublic interface UserRepository {\r\n\r\n    // highlight-start\r\n    // \u67e5\u8be2\u6240\u6709\u7528\u6237\u7c7b\u578b=VIP\u7684User\r\n    @Query(userList = @UserListQueryArguments(userType = @UserTypeExpression1(opr = Operator.EQ, val = UserType.VIP)))\r\n    // highlight-end\r\n    Mono<List<User>> queryVIPUserList();\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"\u6d4b\u8bd5\u6bcf\u4e00\u4e2a User \u7684 userType"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"package demo.gp.order.test;\r\n\r\nimport demo.gp.order.dto.enumType.UserType;\r\nimport demo.gp.order.dto.objectType.User;\r\nimport demo.gp.order.repository.UserRepository;\r\nimport io.nozdormu.spi.context.BeanContext;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@ExtendWith(TestResultLoggerExtension.class)\r\npublic class UserRepositoryTest {\r\n\r\n    private final UserRepository userRepository = BeanContext.get(UserRepository.class);\r\n\r\n    @Test\r\n    void queryVIPUserListTest() {\r\n        List<User> userLit = userRepository.queryVIPUserList().block();\r\n        assertAll(\r\n                userLit.stream().map((item) -> () -> assertEquals(item.getUserType(), UserType.VIP))\r\n        );\r\n    }\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test queryVIPUserListTest():\n"})}),"\n",(0,n.jsx)(r.h3,{id:"2-\u6839\u636e\u53d8\u91cf\u67e5\u8be2\u7528\u6237",children:"2. \u6839\u636e\u53d8\u91cf\u67e5\u8be2\u7528\u6237"}),"\n",(0,n.jsxs)(r.p,{children:["\u4ee5 ",(0,n.jsx)(r.strong,{children:"$"})," \u5f00\u5934\u7684\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u65b9\u6cd5\u53c2\u6570\u540d, \u4f5c\u4e3a\u63a5\u53e3\u53d8\u91cf"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'package demo.gp.order.repository;\r\n\r\n// highlight-start\r\nimport demo.gp.order.dto.annotation.Query;\r\n// highlight-end\r\nimport demo.gp.order.dto.annotation.UserListQueryArguments;\r\nimport demo.gp.order.dto.annotation.UserTypeExpression1;\r\nimport demo.gp.order.dto.enumType.UserType;\r\nimport demo.gp.order.dto.objectType.User;\r\nimport io.graphoenix.core.dto.enumType.Operator;\r\nimport io.graphoenix.spi.annotation.GraphQLOperation;\r\n\r\nimport java.util.List;\r\n\r\n@GraphQLOperation\r\npublic interface UserRepository {\r\n\r\n    // highlight-start\r\n    // \u67e5\u8be2\u6240\u6709\u7528\u6237\u7c7b\u578b=userType\u53c2\u6570\u7684User\r\n    @Query(userList = @UserListQueryArguments(userType = @UserTypeExpression1(opr = Operator.EQ, $val = "userType")))\r\n    // highlight-end\r\n    Mono<List<User>> queryUserListByUserType(UserType userType);\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"\u6d4b\u8bd5\u6bcf\u4e00\u4e2a User \u7684 userType"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"@ExtendWith(TestResultLoggerExtension.class)\r\npublic class UserRepositoryTest {\r\n\r\n    private final UserRepository userRepository = BeanContext.get(UserRepository.class);\r\n\r\n    @Test\r\n    void queryUserListByUserTypeTest() {\r\n        List<User> userLit = userRepository.queryUserListByUserType(UserType.REGULAR).block();\r\n        assertAll(\r\n                userLit.stream().map((item) -> () -> assertEquals(item.getUserType(), UserType.REGULAR))\r\n        );\r\n    }\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test queryVIPUserListByUserTypeTest():\n"})}),"\n",(0,n.jsx)(r.h3,{id:"3-\u63a7\u5236\u67e5\u8be2\u5b57\u6bb5",children:"3. \u63a7\u5236\u67e5\u8be2\u5b57\u6bb5"}),"\n",(0,n.jsx)(r.p,{children:"GPA \u63a5\u53e3\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ea\u4f1a\u67e5\u8be2\u6240\u6709 Scalar \u5b57\u6bb5, \u53ef\u4ee5\u4f7f\u7528@SelectionSet \u6ce8\u89e3\u81ea\u5b9a\u4e49\u67e5\u8be2\u5b57\u6bb5"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@GraphQLOperation\r\npublic interface UserRepository {\r\n\r\n    @Query(userList = @UserListQueryArguments(userType = @UserTypeExpression1(opr = Operator.EQ, $val = "userType")))\r\n    // highlight-start\r\n    // \u67e5\u8be2name\u5b57\u6bb5\r\n    @SelectionSet("{ name }")\r\n    // highlight-end\r\n    Mono<List<User>> queryUserNameListByUserType(UserType userType);\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"\u6d4b\u8bd5\u6bcf\u4e00\u4e2a User \u7684 \u8fd4\u56de\u5b57\u6bb5, \u9664 name \u5b57\u6bb5\u5916\u5168\u90e8\u4e3a null"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"@ExtendWith(TestResultLoggerExtension.class)\r\npublic class UserRepositoryTest {\r\n\r\n    private final UserRepository userRepository = BeanContext.get(UserRepository.class);\r\n\r\n    @Test\r\n    void queryUserNameListByUserTypeTest() {\r\n        List<User> userLit = userRepository.queryUserNameListByUserType(UserType.REGULAR).block();\r\n        assertAll(\r\n                userLit.stream().map((item) ->\r\n                        () -> assertAll(\r\n                                () -> assertNotNull(item.getName()),\r\n                                () -> assertNull(item.getId()),\r\n                                () -> assertNull(item.getUserType()),\r\n                                () -> assertNull(item.getEmail()),\r\n                                () -> assertNull(item.getPhoneNumbers())\r\n                        )\r\n                )\r\n        );\r\n    }\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test queryUserNameListByUserTypeTest():\n"})}),"\n",(0,n.jsx)(r.h3,{id:"4-\u67e5\u8be2-alice-\u7684\u8ba2\u5355",children:"4. \u67e5\u8be2 Alice \u7684\u8ba2\u5355"}),"\n",(0,n.jsx)(r.p,{children:"\u4f7f\u7528 name \u53c2\u6570\u4f5c\u4e3a\u7528\u6237\u540d\u67e5\u8be2\u53d8\u91cf, \u67e5\u8be2\u7528\u6237\u7684\u8ba2\u5355\u4fe1\u606f"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@GraphQLOperation\r\npublic interface UserRepository {\r\n\r\n    // highlight-start\r\n    @Query(user = @UserQueryArguments(name = @StringExpression1(opr = Operator.EQ, $val = "name")))\r\n    @SelectionSet("{ name orders { items { product { name } quantity } } }")\r\n    // highlight-end\r\n    Mono<User> queryUserOrdersListByName(String name);\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"\u6d4b\u8bd5\u6bcf\u4e00\u4e2a User \u7684 \u8ba2\u5355\u4fe1\u606f"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@ExtendWith(TestResultLoggerExtension.class)\r\npublic class UserRepositoryTest {\r\n\r\n    private final UserRepository userRepository = BeanContext.get(UserRepository.class);\r\n\r\n    @Test\r\n    void queryUserOrdersListByNameTest() {\r\n        User user = userRepository.queryUserOrdersListByName("Alice").block();\r\n        assertAll(\r\n                () -> assertEquals(user.getOrders().size(), 1),\r\n                () -> assertEquals(new ArrayList<>(user.getOrders()).get(0).getItems().size(), 2),\r\n                () -> assertEquals(new ArrayList<>(new ArrayList<>(user.getOrders()).get(0).getItems()).get(0).getProduct().getName(), "Laptop"),\r\n                () -> assertEquals(new ArrayList<>(new ArrayList<>(user.getOrders()).get(0).getItems()).get(0).getQuantity(), 1),\r\n                () -> assertEquals(new ArrayList<>(new ArrayList<>(user.getOrders()).get(0).getItems()).get(1).getProduct().getName(), "Tablet"),\r\n                () -> assertEquals(new ArrayList<>(new ArrayList<>(user.getOrders()).get(0).getItems()).get(1).getQuantity(), 2)\r\n        );\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test queryUserOrdersListByNameTest():\n"})}),"\n",(0,n.jsx)(r.h3,{id:"5-\u5206\u7ec4\u67e5\u8be2\u666e\u901a\u7528\u6237\u548c\u4f1a\u5458\u7528\u6237\u7684\u6570\u91cf",children:"5. \u5206\u7ec4\u67e5\u8be2\u666e\u901a\u7528\u6237\u548c\u4f1a\u5458\u7528\u6237\u7684\u6570\u91cf"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@GraphQLOperation\r\npublic interface UserRepository {\r\n\r\n    // highlight-start\r\n    @Query(userList = @UserListQueryArguments(groupBy = {"userType"}))\r\n    @SelectionSet("{ userType idCount }")\r\n    // highlight-end\r\n    Mono<List<User>> queryUserCountByUserType();\r\n}\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"@ExtendWith(TestResultLoggerExtension.class)\r\npublic class UserRepositoryTest {\r\n\r\n    private final UserRepository userRepository = BeanContext.get(UserRepository.class);\r\n\r\n    @Test\r\n    void queryUserCountByUserTypeTest() {\r\n        List<User> userList = userRepository.queryUserCountByUserType().block();\r\n        assertAll(\r\n                () -> assertEquals(userList.size(), 2),\r\n                () -> assertEquals(new ArrayList<>(userList).get(0).getUserType(), UserType.VIP),\r\n                () -> assertEquals(new ArrayList<>(userList).get(0).getIdCount(), 12),\r\n                () -> assertEquals(new ArrayList<>(userList).get(1).getUserType(), UserType.REGULAR),\r\n                () -> assertEquals(new ArrayList<>(userList).get(1).getIdCount(), 12)\r\n        );\r\n    }\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test queryUserCountByUserTypeTest():\n"})}),"\n",(0,n.jsx)(r.h3,{id:"6-\u67e5\u8be2\u4ef7\u683c\u5728-300-\u4ee5\u5185-\u4ef7\u683c\u6700\u9ad8\u7684\u4ea7\u54c1",children:"6. \u67e5\u8be2\u4ef7\u683c\u5728 300 \u4ee5\u5185, \u4ef7\u683c\u6700\u9ad8\u7684\u4ea7\u54c1"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@GraphQLOperation\r\npublic interface ProductRepository {\r\n\r\n    // highlight-start\r\n    @Query(product = @ProductQueryArguments(price = @FloatExpression1(opr = Operator.LTE, $val = "price")))\r\n    @SelectionSet("{ name priceMax }")\r\n    // highlight-end\r\n    Mono<Product> queryPriceMaxLessThan(Float price);\r\n}\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@ExtendWith(TestResultLoggerExtension.class)\r\npublic class ProductRepositoryTest {\r\n\r\n    private final ProductRepository productRepository = BeanContext.get(ProductRepository.class);\r\n\r\n    @Test\r\n    void queryPriceMaxLessThanTest() {\r\n        Product product = productRepository.queryPriceMaxLessThan(300.00f).block();\r\n        assertAll(\r\n                () -> assertEquals(product.getName(), "Tablet"),\r\n                () -> assertEquals(product.getPriceMax(), 299.99f)\r\n        );\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test queryPriceMaxLessThanTest():\n"})}),"\n",(0,n.jsx)(r.h2,{id:"\u53d8\u66f4\u63a5\u53e3",children:"\u53d8\u66f4\u63a5\u53e3"}),"\n",(0,n.jsx)(r.h3,{id:"1-\u65b0\u589e\u7528\u6237-yara",children:"1. \u65b0\u589e\u7528\u6237 Yara"}),"\n",(0,n.jsxs)(r.p,{children:["\u4f7f\u7528@Mutation \u6ce8\u89e3\u6807\u8bb0\u63a5\u53e3\u65b9\u6cd5, \u8bf7\u6ce8\u610f, \u6b64\u5904\u7684@Mutation \u6ce8\u89e3\u662f\u5728\u4e4b\u524d\u751f\u6210\u7684\u7684",(0,n.jsx)(r.a,{href:"/docs/tutorial/quick-start#4-%E4%BD%BF%E7%94%A8-gradle-%E6%8F%92%E4%BB%B6%E7%94%9F%E6%88%90-java-bean",children:"GPA \u6ce8\u89e3"}),", ",(0,n.jsx)(r.strong,{children:"\u5e76\u975e org.eclipse.microprofile.graphql.Mutation"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@GraphQLOperation\r\npublic interface UserRepository {\r\n\r\n    // highlight-start\r\n    @Mutation(user = @UserMutationArguments($input = "userInput"))\r\n    // highlight-end\r\n    @SelectionSet("{ id name email userType }")\r\n    Mono<User> mutationUser(UserInput userInput);\r\n}\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@ExtendWith(TestResultLoggerExtension.class)\r\npublic class UserRepositoryTest {\r\n\r\n    private final UserRepository userRepository = BeanContext.get(UserRepository.class);\r\n\r\n    @Test\r\n    void mutationUserTest() {\r\n        UserInput userInput = new UserInput();\r\n        userInput.setName("Yara");\r\n        userInput.setEmail("yara@example.com");\r\n        userInput.setUserType(UserType.VIP);\r\n        User user = userRepository.mutationUser(userInput).block();\r\n        assertAll(\r\n                () -> assertNotNull(user.getId()),\r\n                () -> assertEquals(user.getName(), "Yara"),\r\n                () -> assertEquals(user.getEmail(), "yara@example.com"),\r\n                () -> assertEquals(user.getUserType(), UserType.VIP)\r\n        );\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test mutationUserTest():\n"})}),"\n",(0,n.jsx)(r.h3,{id:"2-\u66f4\u65b0\u7528\u6237",children:"2. \u66f4\u65b0\u7528\u6237"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@GraphQLOperation\r\npublic interface UserRepository {\r\n\r\n    // highlight-start\r\n    @Mutation(user = @UserMutationArguments($userType = "userType", where = @UserExpression1(name = @StringExpression2(opr = Operator.EQ, $val = "name"))))\r\n    // highlight-end\r\n    @SelectionSet("{ id name userType }")\r\n    Mono<User> updateUserTypeByName(UserType userType, String name);\r\n}\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@ExtendWith(TestResultLoggerExtension.class)\r\npublic class UserRepositoryTest {\r\n\r\n    private final UserRepository userRepository = BeanContext.get(UserRepository.class);\r\n\r\n    @Test\r\n    void updateUserTypeByNameTest() {\r\n        User user = userRepository.updateUserTypeByName(UserType.REGULAR, "Yara").block();\r\n        assertAll(\r\n                () -> assertEquals(user.getName(), "Yara"),\r\n                () -> assertEquals(user.getUserType(), UserType.REGULAR)\r\n        );\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test updateUserTypeByNameTest():\n"})}),"\n",(0,n.jsx)(r.h3,{id:"3-\u5220\u9664\u7528\u6237",children:"3. \u5220\u9664\u7528\u6237"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@GraphQLOperation\r\npublic interface UserRepository {\r\n\r\n    // highlight-start\r\n    @Mutation(user = @UserMutationArguments(isDeprecated = true, where = @UserExpression1(name = @StringExpression2(opr = Operator.EQ, $val = "name"))))\r\n    // highlight-end\r\n    @SelectionSet("{ id }")\r\n    Mono<User> removeUserByName(String name);\r\n}\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'@ExtendWith(TestResultLoggerExtension.class)\r\npublic class UserRepositoryTest {\r\n\r\n    private final UserRepository userRepository = BeanContext.get(UserRepository.class);\r\n\r\n    @Test\r\n    void removeUserByNameTest() {\r\n        User user = userRepository.removeUserByName("Yara").block();\r\n        assertNull(user);\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"\u8f93\u51fa\u7ed3\u679c"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-log",children:"INFO: Test Successful for test removeUserByNameTest():\n"})})]})}function c(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},5710:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>o});var n=s(758);const t={},i=n.createContext(t);function a(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);